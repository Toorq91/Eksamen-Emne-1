Model-View-Controller (MVC):
Ved bruken av MVC oppsett, deler man applikasjonen opp i tre komponenter noe som gjør ting mer oversiktlig og lettere å jobbe med: 

(Model) tar for seg de tingene som har med henting og lagring av data, samt endringer over tid.
(View) tar for seg alt som har med visning av data å gjøre i samhandel med (Model) og (controller) og presenterer dette på en meningsfull måte.
(Controller) styrer det som skal skje med (Model) og (View), blir som et bindeledd mellom brukerens handlinger og applikasjonens logikk.

(Model): 
Denne delen tar for seg strukturen og egenskapene til dataene som applikasjonen arbeider med.
Håndterer kommunikasjon med databaser, API-er eller lokale lagringsenheter for å hente og lagre data.
Setter reglene og logikken for hvordan dataene i applikasjonen endres og behandles.
Fungerer som en bro mellom datalagringssystemene og brukergrensesnittet (det som blir vist på skjermen, også kalt "UI - User Interface").

(View):
Ansvarlig for å presentere dataene for brukeren samt håndtere brukergrensesnittet som: formatering av data, opprettelse av tabeller, lister, diagrammer etc.
Den definerer brukergrensesnittet som brukeren jobber med: utformingen av sider, knapper, skjemaer og andre elementer.
(View) kan oppdatere brukergrensesnittet basert på brukerens handlinger eller endringer i dataen som: å skjule elementer, oppdatere innholdet i sann tid og gi tilbakemelding til brukeren.
(View) er som regel passiv men kan håndtere enkle brukerinteraksjoner som: å klikke på knapper eller fylle ut skjemaer og sende disse handlingene videre til (Controller) for behandling.


(Controller):
Mottar brukerens handlinger fra brukergrensesnittet (View) som: klikk på knapper eller utfylling av skjemaer.
Bestemmer hvordan modellen skal oppdateres eller hvilke handlinger som skal utføres.
Sørger for at riktig handling eller respons blir utført av applikasjonen basert på hva brukeren gjør eller trykker på brukergrensesnittet.




(MVC) i min kode:

(Model): 
currentBoard: gir startposisjonen og oppdateres ettersom cellene blir fyllt inn. 
selectedSquareIndex: gir indeks for cellene. 
finished: binær verdi som viser om spillet er ferdig. 
youWonMessage: legger til en overskrift under spillet. 

fullyFilled: sjekker om det er fyllt inn 16 tall i brettet. 

hasDuplicatesInRows: sjekker om det er duplikater på brettet. 

getColumns: gir en 1d representasjon av brettets kolonner.

getSquare: benyttes av getSquares for å hente ut èn firkant.

getSquares: gir en 1d representasjon av brettets firkanter.


(View):
updateView(); kaller på viewet.

function updateView(): viser alt som skal stå i den tomme <div>-en i body ved å referere med id="app".
Den tegner opp hele brettet, knappene, vinnerteksten og tallene i feltene. 
Samarbeider med CSS for å kunne fargelegge, bytte størrelse etc.

Benytter hasDuplicatesInRows() til å sjekke om det er duplikater i brettets rader, kolonner eller firkanter.
Hvis det ikke er duplikater sjekker fullyFilled() om brettet er ferdig utfylt. 
(View) endrer bakgrunnsfargen på brettet til rosa (duplikater) eller grønn (spill vunnet).  


(Controller):
button1,2,3,4: bytter ut det som står i den valgte cellen med tallene 1-4.

buttonReset: setter hele brettet tilbake til startposisjonen og fjerner vinnerteksten.

createBoard: tegner brettet og viser den valgte cellen.

selectSquare: fargelegger den valgte cellen og fjerner denne når spillet er ferdig.